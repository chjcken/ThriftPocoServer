/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Counter_H
#define Counter_H

#include <thrift/TDispatchProcessor.h>
#include "counter_types.h"

namespace counterService {

class CounterIf {
 public:
  virtual ~CounterIf() {}
  virtual bool put(const std::string& id, const int putType) = 0;
  virtual int getTotal() = 0;
  virtual int get(const std::string& id, const int getType) = 0;
  virtual bool inc(const std::string& id, const int num) = 0;
};

class CounterIfFactory {
 public:
  typedef CounterIf Handler;

  virtual ~CounterIfFactory() {}

  virtual CounterIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CounterIf* /* handler */) = 0;
};

class CounterIfSingletonFactory : virtual public CounterIfFactory {
 public:
  CounterIfSingletonFactory(const boost::shared_ptr<CounterIf>& iface) : iface_(iface) {}
  virtual ~CounterIfSingletonFactory() {}

  virtual CounterIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CounterIf* /* handler */) {}

 protected:
  boost::shared_ptr<CounterIf> iface_;
};

class CounterNull : virtual public CounterIf {
 public:
  virtual ~CounterNull() {}
  bool put(const std::string& /* id */, const int /* putType */) {
    bool _return = false;
    return _return;
  }
  int getTotal() {
    int _return = 0;
    return _return;
  }
  int get(const std::string& /* id */, const int /* getType */) {
    int _return = 0;
    return _return;
  }
  bool inc(const std::string& /* id */, const int /* num */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _Counter_put_args__isset {
  _Counter_put_args__isset() : id(false), putType(false) {}
  bool id :1;
  bool putType :1;
} _Counter_put_args__isset;

class Counter_put_args {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  Counter_put_args(const Counter_put_args&);
  Counter_put_args& operator=(const Counter_put_args&);
  Counter_put_args() : id(), putType(0) {
  }

  virtual ~Counter_put_args() throw();
  std::string id;
  int putType;

  _Counter_put_args__isset __isset;

  void __set_id(const std::string& val);

  void __set_putType(const int val);

  bool operator == (const Counter_put_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(putType == rhs.putType))
      return false;
    return true;
  }
  bool operator != (const Counter_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Counter_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Counter_put_args& obj);
};


class Counter_put_pargs {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};


  virtual ~Counter_put_pargs() throw();
  const std::string* id;
  const int* putType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Counter_put_pargs& obj);
};

typedef struct _Counter_put_result__isset {
  _Counter_put_result__isset() : success(false) {}
  bool success :1;
} _Counter_put_result__isset;

class Counter_put_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  Counter_put_result(const Counter_put_result&);
  Counter_put_result& operator=(const Counter_put_result&);
  Counter_put_result() : success(0) {
  }

  virtual ~Counter_put_result() throw();
  bool success;

  _Counter_put_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Counter_put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Counter_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Counter_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Counter_put_result& obj);
};

typedef struct _Counter_put_presult__isset {
  _Counter_put_presult__isset() : success(false) {}
  bool success :1;
} _Counter_put_presult__isset;

class Counter_put_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~Counter_put_presult() throw();
  bool* success;

  _Counter_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Counter_put_presult& obj);
};


class Counter_getTotal_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Counter_getTotal_args(const Counter_getTotal_args&);
  Counter_getTotal_args& operator=(const Counter_getTotal_args&);
  Counter_getTotal_args() {
  }

  virtual ~Counter_getTotal_args() throw();

  bool operator == (const Counter_getTotal_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Counter_getTotal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Counter_getTotal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Counter_getTotal_args& obj);
};


class Counter_getTotal_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Counter_getTotal_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Counter_getTotal_pargs& obj);
};

typedef struct _Counter_getTotal_result__isset {
  _Counter_getTotal_result__isset() : success(false) {}
  bool success :1;
} _Counter_getTotal_result__isset;

class Counter_getTotal_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  Counter_getTotal_result(const Counter_getTotal_result&);
  Counter_getTotal_result& operator=(const Counter_getTotal_result&);
  Counter_getTotal_result() : success(0) {
  }

  virtual ~Counter_getTotal_result() throw();
  int success;

  _Counter_getTotal_result__isset __isset;

  void __set_success(const int val);

  bool operator == (const Counter_getTotal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Counter_getTotal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Counter_getTotal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Counter_getTotal_result& obj);
};

typedef struct _Counter_getTotal_presult__isset {
  _Counter_getTotal_presult__isset() : success(false) {}
  bool success :1;
} _Counter_getTotal_presult__isset;

class Counter_getTotal_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~Counter_getTotal_presult() throw();
  int* success;

  _Counter_getTotal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Counter_getTotal_presult& obj);
};

typedef struct _Counter_get_args__isset {
  _Counter_get_args__isset() : id(false), getType(false) {}
  bool id :1;
  bool getType :1;
} _Counter_get_args__isset;

class Counter_get_args {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  Counter_get_args(const Counter_get_args&);
  Counter_get_args& operator=(const Counter_get_args&);
  Counter_get_args() : id(), getType(0) {
  }

  virtual ~Counter_get_args() throw();
  std::string id;
  int getType;

  _Counter_get_args__isset __isset;

  void __set_id(const std::string& val);

  void __set_getType(const int val);

  bool operator == (const Counter_get_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(getType == rhs.getType))
      return false;
    return true;
  }
  bool operator != (const Counter_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Counter_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Counter_get_args& obj);
};


class Counter_get_pargs {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};


  virtual ~Counter_get_pargs() throw();
  const std::string* id;
  const int* getType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Counter_get_pargs& obj);
};

typedef struct _Counter_get_result__isset {
  _Counter_get_result__isset() : success(false) {}
  bool success :1;
} _Counter_get_result__isset;

class Counter_get_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  Counter_get_result(const Counter_get_result&);
  Counter_get_result& operator=(const Counter_get_result&);
  Counter_get_result() : success(0) {
  }

  virtual ~Counter_get_result() throw();
  int success;

  _Counter_get_result__isset __isset;

  void __set_success(const int val);

  bool operator == (const Counter_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Counter_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Counter_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Counter_get_result& obj);
};

typedef struct _Counter_get_presult__isset {
  _Counter_get_presult__isset() : success(false) {}
  bool success :1;
} _Counter_get_presult__isset;

class Counter_get_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~Counter_get_presult() throw();
  int* success;

  _Counter_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Counter_get_presult& obj);
};

typedef struct _Counter_inc_args__isset {
  _Counter_inc_args__isset() : id(false), num(false) {}
  bool id :1;
  bool num :1;
} _Counter_inc_args__isset;

class Counter_inc_args {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  Counter_inc_args(const Counter_inc_args&);
  Counter_inc_args& operator=(const Counter_inc_args&);
  Counter_inc_args() : id(), num(0) {
  }

  virtual ~Counter_inc_args() throw();
  std::string id;
  int num;

  _Counter_inc_args__isset __isset;

  void __set_id(const std::string& val);

  void __set_num(const int val);

  bool operator == (const Counter_inc_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(num == rhs.num))
      return false;
    return true;
  }
  bool operator != (const Counter_inc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Counter_inc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Counter_inc_args& obj);
};


class Counter_inc_pargs {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};


  virtual ~Counter_inc_pargs() throw();
  const std::string* id;
  const int* num;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Counter_inc_pargs& obj);
};

typedef struct _Counter_inc_result__isset {
  _Counter_inc_result__isset() : success(false) {}
  bool success :1;
} _Counter_inc_result__isset;

class Counter_inc_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  Counter_inc_result(const Counter_inc_result&);
  Counter_inc_result& operator=(const Counter_inc_result&);
  Counter_inc_result() : success(0) {
  }

  virtual ~Counter_inc_result() throw();
  bool success;

  _Counter_inc_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Counter_inc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Counter_inc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Counter_inc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Counter_inc_result& obj);
};

typedef struct _Counter_inc_presult__isset {
  _Counter_inc_presult__isset() : success(false) {}
  bool success :1;
} _Counter_inc_presult__isset;

class Counter_inc_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~Counter_inc_presult() throw();
  bool* success;

  _Counter_inc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Counter_inc_presult& obj);
};

class CounterClient : virtual public CounterIf {
 public:
  CounterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CounterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool put(const std::string& id, const int putType);
  void send_put(const std::string& id, const int putType);
  bool recv_put();
  int getTotal();
  void send_getTotal();
  int recv_getTotal();
  int get(const std::string& id, const int getType);
  void send_get(const std::string& id, const int getType);
  int recv_get();
  bool inc(const std::string& id, const int num);
  void send_inc(const std::string& id, const int num);
  bool recv_inc();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CounterProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CounterIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CounterProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTotal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_inc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CounterProcessor(boost::shared_ptr<CounterIf> iface) :
    iface_(iface) {
    processMap_["put"] = &CounterProcessor::process_put;
    processMap_["getTotal"] = &CounterProcessor::process_getTotal;
    processMap_["get"] = &CounterProcessor::process_get;
    processMap_["inc"] = &CounterProcessor::process_inc;
  }

  virtual ~CounterProcessor() {}
};

class CounterProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CounterProcessorFactory(const ::boost::shared_ptr< CounterIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CounterIfFactory > handlerFactory_;
};

class CounterMultiface : virtual public CounterIf {
 public:
  CounterMultiface(std::vector<boost::shared_ptr<CounterIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CounterMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CounterIf> > ifaces_;
  CounterMultiface() {}
  void add(boost::shared_ptr<CounterIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool put(const std::string& id, const int putType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(id, putType);
    }
    return ifaces_[i]->put(id, putType);
  }

  int getTotal() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTotal();
    }
    return ifaces_[i]->getTotal();
  }

  int get(const std::string& id, const int getType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(id, getType);
    }
    return ifaces_[i]->get(id, getType);
  }

  bool inc(const std::string& id, const int num) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->inc(id, num);
    }
    return ifaces_[i]->inc(id, num);
  }

};

} // namespace

#endif
